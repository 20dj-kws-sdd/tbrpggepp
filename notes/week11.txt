- Implemented moves editing form
- - Created "propogateChange()" method in tile edit form such that changes made in the child forms can be "propogated" back to the parent and eventually to the main form
- - Encountered an issue where changes would persist in the overall game world even if forms had the cancel (instead of the 'save') button clicked. Realized this was because of how Python handles references and the creation of new variables assigned preexisting variable values. Resolved by going into the init subroutine of each child form and replacing ```self.game_world = game_world``` with ```self.game_world = copy.deepcopy(game_world)``` which resolved the issue completely


- Refactored saving sustem for tiles. Instead of each child form independently editing the wider game_world the child forms instead complete their respective components of the dictionary and send it back to the tile editing form. The tile editing form then compiles these changes and edits them into its copy of the game_world, then calls the mainMenu form to assimilate this game_world and write it to disk.
- Refactored further such that the editTile form only edits the value of the individual tile entry and sends that back to an updateTile() method in the main menu
- Added file saving and creation of new files in introform
- Next is adding git and spawning game processes and further validation e.g. coordinates for new tiles

- Issue saving tiles, change not appearing on world map
- - Added a loop to remove tiles which overlap coordinates with new ones
- - May have just been forgetting to update tile_name with data from le object
- Changed tileClicked method such that coords showed up even when clicking on empty tiles and the coords appeared in the editTile form
- Fixed an issue where tiles would still appear at their old coordinates by adding a clear() method to the start of loading world maps
- Realized I need a button to delete tiles
- I need to add a check that the user isn't adding an identical name in a separate tile, since tile names are used as keyID's instead of coordinates (dumb mistake I made 2 years ago)

- Added delete button to main form
- Encountered an issue whereby even when cancelling the moves edit form or deleting a tile and reopening it, the moves_dict still persists in memory
- - Like previous issues whose solutions were discarded by the refactoring, this was resolved by using deepcopys of sub-dicts for child forms

- As thought, resuing a tile name completely deletes the initial tile. Added an error message in mainForm that also renames the new tile to a temporary random string for the user to manually rename (IF the coordinates between the two tiles differ)

- In this state the program is perfectly usable with manual use of git and the text game. Next step is to integrate the two into the application.

- Added an if statement to convert empty dmgtype enemy value to None, as it is represented in the json

- Added an error message if the user attempts to save a tile before opening/creating a world file.

- Added to the if clauses in the intro form so the user doesn't get an error message if they don't select a file (ie. cancelled the file dialog)

- Added docstrings to every function in the program and proper comments, while I still remember how everything works!
